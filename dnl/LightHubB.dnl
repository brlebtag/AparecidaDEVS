//-----------------------------------------------!
//			Library								 !
//---------										 !
add library
<%
import java.io.FileReader;
import java.io.BufferedReader;
import java.lang.StringBuilder;
%>!

//-----------------------------------------------!
//			Messages typedef!
//---------!
accepts input on LightChangedState with type LightChangedState!
accepts input on CarCrashBehaviorB with type CarCrashBehaviorB!
accepts input on TurnOn with type TurnOn!
accepts input on TurnOff with type TurnOff!
accepts input on Consumption with type Consumption!
accepts input on RestoreBehaviorB with type RestoreBehaviorB!

//-----------------------------------------------!
//			Variables!
//---------!
use listLuminaries with type java.util.ArrayList<Luminaire> and default "new java.util.ArrayList<Luminaire>()"!
use carCrashParam with type String!
use carCrashEvent with type String!
use restoreEvent with type String!
use datetime with type String!
use lightChangedStateParam with type LightChangedState!
use lightChangedStateList with type String and default "\"\""!
use turnOnParam with type TurnOn!
use turnOffParam with type TurnOff!
use restoreBehaviorParam with type String!
use consumptionParam with type Consumption!


//-----------------------------------------------!
//			InitState!
//---------!
to start hold in InitState for time 0!
from the InitState go to ReadyState!
internal event for InitState
<%
try
{
	BufferedReader buffer = new BufferedReader(new FileReader("/home/brlebtag/Documentos/Mestrado/AparecidaDEVS/LightHubB.csv"));
	System.out.println("----------------------- LightHubB File Opened! -----------------------");
	
	while(buffer.ready()) {
		String line = buffer.readLine();
		String[] params = line.split(";");
		Luminaire luminaire = new Luminaire(params[0], toDouble(params[1]), toDouble(params[2]));
		listLuminaries.add(luminaire);
		System.out.println("----------------------- Luminarie: " + luminaire.toString() +" -----------------------");
	}
	
} catch(Exception e) {
	System.out.println("----------------------- LightHubB Couldn't open the file -----------------------");
	System.out.println(e);
}
%>!

//-----------------------------------------------!
//			Wait for Commands!
//---------!
passivate in ReadyState!
when in ReadyState and receive CarCrashBehaviorB go to SendingCarCrashState!
when in ReadyState and receive TurnOn go to SendTurnOnState!
when in ReadyState and receive TurnOff go to SendTurnOffState!
when in ReadyState and receive RestoreBehaviorB go to SendingRestoreBehaviorState!
external event for ReadyState with CarCrashBehaviorB
<%
lightChangedStateList = "";
CarCrashBehaviorB  event = (CarCrashBehaviorB) messageList.get(0).getData();
carCrashEvent = event.getValue();
carCrashParam = buildCarCrashBehavior(carCrashEvent);
System.out.println("----------------------- LightHubB Received CarCrashBehavior ------------------------");
%>!
external event for ReadyState with TurnOn
<%
turnOnParam = (TurnOn) messageList.get(0).getData();
System.out.println("----------------------- LightHubB Received TurnOn ------------------------");
%>!
external event for ReadyState with TurnOff
<%
turnOffParam = (TurnOff) messageList.get(0).getData();
System.out.println("----------------------- LightHubB Received TurnOff ------------------------");
%>!
external event for ReadyState with RestoreBehaviorB
<%
System.out.println("----------------------- LightHubB Received RestoreBehavior1 ------------------------");
lightChangedStateList = "";
RestoreBehaviorB event = (RestoreBehaviorB) messageList.get(0).getData();
restoreEvent = event.getValue();
restoreBehaviorParam = buildRestoreBehavior(restoreEvent);
System.out.println("----------------------- LightHubB Received RestoreBehavior2 ------------------------");
%>!

//-----------------------------------------------!
//			Send SendTurnOnState!
//---------!
hold in SendTurnOnState for time 1!
after SendTurnOnState output TurnOn!
from SendTurnOnState go to WaitForDoneTurnOnState!
output event for SendTurnOnState
<%
output.add(outTurnOn, turnOnParam);
System.out.println("----------------------- LightHubB Sent TurnOn ------------------------");
%>!

//-----------------------------------------------!
//			Send SendTurnOffState!
//---------!
hold in SendTurnOffState for time 1!
after SendTurnOffState output TurnOff!
from SendTurnOffState go to WaitForDoneTurnOffState!
output event for SendTurnOffState
<%
output.add(outTurnOff, turnOffParam);
System.out.println("----------------------- LightHubB Sent TurnOff ------------------------");
%>!

//-----------------------------------------------!
//			Send LightChangedState!
//---------!
hold in SendLightChangedState for time 1!
after SendLightChangedState output LightChangedState!
from SendLightChangedState go to ReadyState!
output event for SendLightChangedState
<%
output.add(outLightChangedState, lightChangedStateParam);
System.out.println("----------------------- LightHubB Sent LightChangedState ------------------------");
%>!

//-----------------------------------------------!
//			Wait for DoneTurnOn!
//---------!
passivate in WaitForDoneTurnOnState!
when in WaitForDoneTurnOnState and receive DoneTurnOn go to ReadyState!

//-----------------------------------------------!
//			Wait for DoneTurnOff!
//---------!
passivate in WaitForDoneTurnOffState!
when in WaitForDoneTurnOffState and receive DoneTurnOff go to SendConsumptionState!
external event for WaitForDoneTurnOffState with DoneTurnOff
<%
consumptionParam = buildConsumption(messageList);
System.out.println("----------------------- LightHubB Received LightChangedState ------------------------");
%>!

//-----------------------------------------------!
//			Send SendConsumptionState!
//---------!
hold in SendConsumptionState for time 1!
after SendConsumptionState output Consumption!
from SendConsumptionState go to ReadyState!
output event for SendConsumptionState
<%
output.add(outConsumption, consumptionParam);
System.out.println("----------------------- LightHubB Sent Consumption ------------------------");
%>!

//-----------------------------------------------!
//			Send SendingCarCrashState!
//---------!
hold in SendingCarCrashState for time 1!
from SendingCarCrashState go to ReadyState!
internal event for SendingCarCrashState
<%
	System.out.println("----------------------- LightHubB internal event ------------------------");
	
	String params[] = carCrashEvent.split(";");
	double latitude = toDouble(params[2]);
	double longitude = toDouble(params[3]);
	boolean anyChange = false;
	
	for(Luminaire luminaire : listLuminaries)
	{
		boolean normalBehavior = luminaire.getBehavior() == Luminaire.NORMAL_BEHAVIOR;
		if (normalBehavior && isWithinRange(luminaire, latitude, longitude, Range)) {
			anyChange = true;
			luminaire.setBehavior(Luminaire.CAR_CRASH_BEHAVIOR);
			System.out.println("----------------------- LightHubB go to SendCarCrashTo"+luminaire.getName()+"State ------------------------");
			holdIn("SendCarCrashTo"+luminaire.getName()+"State", 1.0);
			break;
		}
	}
	
	if (!anyChange) {
		lightChangedStateParam = new LightChangedState(datetime + ";" + "light_changed_state" + ";" + lightChangedStateList);
		holdIn("SendLightChangedState", 1.0);
	}
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB1!
//---------!
hold in SendCarCrashToB1State for time 1!
after SendCarCrashToB1State output CarCrashBehaviorB1!
from SendCarCrashToB1State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB1State
<%
output.add(outCarCrashBehaviorB1, new CarCrashBehaviorB1(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB1 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB2!
//---------!
hold in SendCarCrashToB2State for time 1!
after SendCarCrashToB2State output CarCrashBehaviorB2!
from SendCarCrashToB2State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB2State
<%
output.add(outCarCrashBehaviorB2, new CarCrashBehaviorB2(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB2 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB3!
//---------!
hold in SendCarCrashToB3State for time 1!
after SendCarCrashToB3State output CarCrashBehaviorB3!
from SendCarCrashToB3State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB3State
<%
output.add(outCarCrashBehaviorB3, new CarCrashBehaviorB3(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB3 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB4!
//---------!
hold in SendCarCrashToB4State for time 1!
after SendCarCrashToB4State output CarCrashBehaviorB4!
from SendCarCrashToB4State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB4State
<%
output.add(outCarCrashBehaviorB4, new CarCrashBehaviorB4(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB4 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB5!
//---------!
hold in SendCarCrashToB5State for time 1!
after SendCarCrashToB5State output CarCrashBehaviorB5!
from SendCarCrashToB5State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB5State
<%
output.add(outCarCrashBehaviorB5, new CarCrashBehaviorB5(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB5 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB6!
//---------!
hold in SendCarCrashToB6State for time 1!
after SendCarCrashToB6State output CarCrashBehaviorB6!
from SendCarCrashToB6State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB6State
<%
output.add(outCarCrashBehaviorB6, new CarCrashBehaviorB6(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB6 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB7!
//---------!
hold in SendCarCrashToB7State for time 1!
after SendCarCrashToB7State output CarCrashBehaviorB7!
from SendCarCrashToB7State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB7State
<%
output.add(outCarCrashBehaviorB7, new CarCrashBehaviorB7(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB7 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB8!
//---------!
hold in SendCarCrashToB8State for time 1!
after SendCarCrashToB8State output CarCrashBehaviorB8!
from SendCarCrashToB8State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB8State
<%
output.add(outCarCrashBehaviorB8, new CarCrashBehaviorB8(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB8 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB9!
//---------!
hold in SendCarCrashToB9State for time 1!
after SendCarCrashToB9State output CarCrashBehaviorB9!
from SendCarCrashToB9State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB9State
<%
output.add(outCarCrashBehaviorB9, new CarCrashBehaviorB9(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB9 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB10!
//---------!
hold in SendCarCrashToB10State for time 1!
after SendCarCrashToB10State output CarCrashBehaviorB10!
from SendCarCrashToB10State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB10State
<%
output.add(outCarCrashBehaviorB10, new CarCrashBehaviorB10(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB10 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB11!
//---------!
hold in SendCarCrashToB11State for time 1!
after SendCarCrashToB11State output CarCrashBehaviorB11!
from SendCarCrashToB11State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB11State
<%
output.add(outCarCrashBehaviorB11, new CarCrashBehaviorB11(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB11 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB12!
//---------!
hold in SendCarCrashToB12State for time 1!
after SendCarCrashToB12State output CarCrashBehaviorB12!
from SendCarCrashToB12State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB12State
<%
output.add(outCarCrashBehaviorB12, new CarCrashBehaviorB12(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB12 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB13!
//---------!
hold in SendCarCrashToB13State for time 1!
after SendCarCrashToB13State output CarCrashBehaviorB13!
from SendCarCrashToB13State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB13State
<%
output.add(outCarCrashBehaviorB13, new CarCrashBehaviorB13(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB13 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB14!
//---------!
hold in SendCarCrashToB14State for time 1!
after SendCarCrashToB14State output CarCrashBehaviorB14!
from SendCarCrashToB14State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB14State
<%
output.add(outCarCrashBehaviorB14, new CarCrashBehaviorB14(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB14 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send CarCrashBehaviorB15!
//---------!
hold in SendCarCrashToB15State for time 1!
after SendCarCrashToB15State output CarCrashBehaviorB15!
from SendCarCrashToB15State go to WaitForLightChangedCarCrashState!
output event for SendCarCrashToB15State
<%
output.add(outCarCrashBehaviorB15, new CarCrashBehaviorB15(carCrashParam));
System.out.println("----------------------- LightHubB Sent CarCrashBehaviorB15 "+carCrashParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Wait for WaitForLightChangedStateLoop
//---------!
passivate in WaitForLightChangedCarCrashState!
when in WaitForLightChangedCarCrashState and receive LightChangedState go to SendingCarCrashState!
external event for WaitForLightChangedCarCrashState with LightChangedState
<%
LightChangedState event = (LightChangedState) messageList.get(0).getData();
String payload = event.getValue();
String[] params = payload.split(";");
datetime = params[0];

if (params.length > 2) {
	if (lightChangedStateList.isEmpty()) {
		lightChangedStateList = params[2];
	} else {
		lightChangedStateList += "," + params[2];
	}
}
System.out.println("----------------------- LightHubB Received LightChangedState ------------------------");
%>!

//-----------------------------------------------!
//			Send SendingCarCrashState!
//---------!
hold in SendingRestoreBehaviorState for time 1!
from SendingRestoreBehaviorState go to ReadyState!
internal event for SendingRestoreBehaviorState
<%
	System.out.println("----------------------- LightHubB internal event ------------------------");
	
	String params[] = restoreEvent.split(";");
	double latitude = toDouble(params[2]);
	double longitude = toDouble(params[3]);
	boolean anyChange = false;
	
	for(Luminaire luminaire : listLuminaries)
	{
		boolean carCrashBehavior = luminaire.getBehavior() == Luminaire.CAR_CRASH_BEHAVIOR;
		if (carCrashBehavior && isWithinRange(luminaire, latitude, longitude, Range)) {
			anyChange = true;
			luminaire.setBehavior(Luminaire.NORMAL_BEHAVIOR);
			System.out.println("----------------------- LightHubB go to SendRestoreBehaviorTo"+luminaire.getName()+"State ------------------------");
			holdIn("SendRestoreBehaviorTo"+luminaire.getName()+"State", 1.0);
			break;
		}
	}
	
	if (!anyChange) {
		lightChangedStateParam = new LightChangedState(datetime + ";" + "light_changed_state" + ";" + lightChangedStateList);
		holdIn("SendLightChangedState", 1.0);
	}
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB1!
//---------!
hold in SendRestoreBehaviorToB1State for time 1!
after SendRestoreBehaviorToB1State output RestoreBehaviorB1!
from SendRestoreBehaviorToB1State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB1State
<%
output.add(outRestoreBehaviorB1, new RestoreBehaviorB1(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB1 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB2!
//---------!
hold in SendRestoreBehaviorToB2State for time 1!
after SendRestoreBehaviorToB2State output RestoreBehaviorB2!
from SendRestoreBehaviorToB2State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB2State
<%
output.add(outRestoreBehaviorB2, new RestoreBehaviorB2(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB2 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB3!
//---------!
hold in SendRestoreBehaviorToB3State for time 1!
after SendRestoreBehaviorToB3State output RestoreBehaviorB3!
from SendRestoreBehaviorToB3State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB3State
<%
output.add(outRestoreBehaviorB3, new RestoreBehaviorB3(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB3 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB4!
//---------!
hold in SendRestoreBehaviorToB4State for time 1!
after SendRestoreBehaviorToB4State output RestoreBehaviorB4!
from SendRestoreBehaviorToB4State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB4State
<%
output.add(outRestoreBehaviorB4, new RestoreBehaviorB4(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB4 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB5!
//---------!
hold in SendRestoreBehaviorToB5State for time 1!
after SendRestoreBehaviorToB5State output RestoreBehaviorB5!
from SendRestoreBehaviorToB5State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB5State
<%
output.add(outRestoreBehaviorB5, new RestoreBehaviorB5(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB5 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB6!
//---------!
hold in SendRestoreBehaviorToB6State for time 1!
after SendRestoreBehaviorToB6State output RestoreBehaviorB6!
from SendRestoreBehaviorToB6State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB6State
<%
output.add(outRestoreBehaviorB6, new RestoreBehaviorB6(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB6 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB7!
//---------!
hold in SendRestoreBehaviorToB7State for time 1!
after SendRestoreBehaviorToB7State output RestoreBehaviorB7!
from SendRestoreBehaviorToB7State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB7State
<%
output.add(outRestoreBehaviorB7, new RestoreBehaviorB7(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB7 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB8!
//---------!
hold in SendRestoreBehaviorToB8State for time 1!
after SendRestoreBehaviorToB8State output RestoreBehaviorB8!
from SendRestoreBehaviorToB8State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB8State
<%
output.add(outRestoreBehaviorB8, new RestoreBehaviorB8(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB8 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB9!
//---------!
hold in SendRestoreBehaviorToB9State for time 1!
after SendRestoreBehaviorToB9State output RestoreBehaviorB9!
from SendRestoreBehaviorToB9State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB9State
<%
output.add(outRestoreBehaviorB9, new RestoreBehaviorB9(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB9 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB10!
//---------!
hold in SendRestoreBehaviorToB10State for time 1!
after SendRestoreBehaviorToB10State output RestoreBehaviorB10!
from SendRestoreBehaviorToB10State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB10State
<%
output.add(outRestoreBehaviorB10, new RestoreBehaviorB10(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB10 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB11!
//---------!
hold in SendRestoreBehaviorToB11State for time 1!
after SendRestoreBehaviorToB11State output RestoreBehaviorB11!
from SendRestoreBehaviorToB11State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB11State
<%
output.add(outRestoreBehaviorB11, new RestoreBehaviorB11(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB11 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB12!
//---------!
hold in SendRestoreBehaviorToB12State for time 1!
after SendRestoreBehaviorToB12State output RestoreBehaviorB12!
from SendRestoreBehaviorToB12State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB12State
<%
output.add(outRestoreBehaviorB12, new RestoreBehaviorB12(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB12 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB13!
//---------!
hold in SendRestoreBehaviorToB13State for time 1!
after SendRestoreBehaviorToB13State output RestoreBehaviorB13!
from SendRestoreBehaviorToB13State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB13State
<%
output.add(outRestoreBehaviorB13, new RestoreBehaviorB13(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB13 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB14!
//---------!
hold in SendRestoreBehaviorToB14State for time 1!
after SendRestoreBehaviorToB14State output RestoreBehaviorB14!
from SendRestoreBehaviorToB14State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB14State
<%
output.add(outRestoreBehaviorB14, new RestoreBehaviorB14(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB14 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Send RestoreBehaviorB15!
//---------!
hold in SendRestoreBehaviorToB15State for time 1!
after SendRestoreBehaviorToB15State output RestoreBehaviorB15!
from SendRestoreBehaviorToB15State go to WaitForLightChangedRestoreState!
output event for SendRestoreBehaviorToB15State
<%
output.add(outRestoreBehaviorB15, new RestoreBehaviorB15(restoreBehaviorParam));
System.out.println("----------------------- LightHubB Sent RestoreBehaviorB15 "+restoreBehaviorParam+" ------------------------");
%>!

//-----------------------------------------------!
//			Wait for LightChangedState
//---------!
passivate in WaitForLightChangedRestoreState!
when in WaitForLightChangedRestoreState and receive LightChangedState go to SendingRestoreBehaviorState!
external event for WaitForLightChangedRestoreState with LightChangedState
<%
LightChangedState event = (LightChangedState) messageList.get(0).getData();
String payload = event.getValue();
String[] params = payload.split(";");
datetime = params[0];

if (params.length > 2) {
	if (lightChangedStateList.isEmpty()) {
		lightChangedStateList = params[2];
	} else {
		lightChangedStateList += "," + params[2];
	}
}
System.out.println("----------------------- LightHubB Received LightChangedState ------------------------");
%>!

//-----------------------------------------------!
//			Additional code!
//---------!

add additional code
<%
protected static final double Range = 50/1000; // KM

class Luminaire {
	private double latitude;
	private double longitude;
	private String name;
	private boolean on;
	private int behavior;
	public static final int NORMAL_BEHAVIOR = 0;
	public static final int CAR_CRASH_BEHAVIOR = 1;
	
	public Luminaire(String name, double latitude, double longitude)
	{
		this.name = name;
		this.longitude = longitude;
		this.latitude = latitude;
		this.on = false;
		this.behavior = Luminaire.NORMAL_BEHAVIOR;
	}
	
	public double getLatitude() {
		return this.latitude;
	}
	
	public double getLongitude() {
		return this.longitude;
	}
	
	public String getName() {
		return this.name;
	}
	
	public String toString() {
		return "Luminaire {\"name\": \""+ this.name+"\", \"latitude\": \""+ this.latitude +"\", \"longitude\": \""+ longitude +"\"}";
	}
	
	public void turnOn() {
		this.on = true;
	}
	
	public void turnOff() {
		this.on = false;
	}
	
	public void setBehavior(int behavior) {
		this.behavior = behavior;
	}
	
	public int getBehavior() {
		return this.behavior;
	}
	
	public boolean getOn() {
		return this.on;
	}
}

protected LightChangedState buildLightChangedState(ArrayList<Message<LightChangedState>> messageList) {
	ArrayList<String> list = new ArrayList<String>();
	
	LightChangedState event;
	String[] params = new String[2];
	
	int size = messageList.size();
	
	for(int i = 0; i < size; i++) {
		event = (LightChangedState) messageList.get(i).getData();
		params = event.getValue().split(";");
		
		if (params.length > 2) {
			list.add(params[2]);	
		}		
	}
	
	if (list.size() > 0) {
		return new LightChangedState(params[0] + ";" + params[1] + ";" + join(list, ","));
	} else {
		return new LightChangedState(params[0] + ";" + params[1]);
	}
}

protected Consumption buildConsumption(ArrayList<Message<Serializable>> messageList) {
	ArrayList<String> list = new ArrayList<String>();
	
	DoneTurnOff event = (DoneTurnOff) messageList.get(0).getData();
	String[] params = event.getValue().split(";");
	
	list.add(params[2]);
	
	int size = messageList.size();
	
	for(int i = 1; i < size; i++) {
		event = (DoneTurnOff) messageList.get(i).getData();
		params = event.getValue().split(";");
		
		if (params.length > 2) {
			list.add(params[2]);
		}
	}
	
	return new Consumption(params[0] + ";consumption;" + join(list, ","));
}

protected String buildCarCrashBehavior(String event) {
	String[] params = event.split(";");
	double latitude = toDouble(params[2]);
	double longitude = toDouble(params[3]);
	
	return params[0] + ";car_crash_behavior;" + AffectedLuminaires(latitude, longitude, Range);
}

protected String buildRestoreBehavior(String event) {
	String[] params = event.split(";");
	double latitude = toDouble(params[2]);
	double longitude = toDouble(params[3]);
	
	return params[0] + ";restore_behavior;" + AffectedLuminaires(latitude, longitude, Range);
}

protected double toDouble(String str) {
	try {
		return Double.parseDouble(str);
	} catch(Exception e) {
		return 0.0;
	}
}

protected String AffectedLuminaires(double latitude, double longitude, double range) {
	ArrayList<String> list = new ArrayList<String>();
	
	for(Luminaire luminaire : listLuminaries)
	{
		if (isWithinRange(luminaire, latitude, longitude, range)) {
			list.add(luminaire.getName());
		}
	}	
	
	return join(list, ",");
}

protected String join(ArrayList<String> list, String separator) {
	StringBuilder builder = new StringBuilder();
	
	int size = list.size();
	
	if (size > 0) {
		
		String value = list.get(0);
		
		builder.append(value);
		
		for(int i = 1; i < size; i++)
		{
			value = list.get(i);
			
			builder.append(separator + value);
		}
	}
	
	return builder.toString();
}

protected boolean isWithinRange(Luminaire luminaire, double latitude, double longitude, double range) {
	double lat1 = luminaire.getLatitude();
	double lon1 = luminaire.getLongitude();
	// double dist = distance(lat1, lon1, latitude, longitude);
	double dist = distanceP(lat1, lon1, latitude, longitude);
	
	// if (dist <= range)
	if (dist <= 50)
		return true;
	return false;	
}

protected double distance(double lat1, double lon1, double lat2, double lon2) {
	lat1 = degreeToRad(lat1);
	lon1 = degreeToRad(lon1);
	lat2 = degreeToRad(lat2);
	lon2 = degreeToRad(lon2);
	return Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(lon1 - lon2)) * 6371;
}

protected double distanceP(double x1, double y1, double x2, double y2) {
	return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
}

protected double degreeToRad(double degree) {
	return degree / Math.PI;
}
%>!
