//-----------------------------------------------!
//			Messages typedef!
//---------!
accepts input on LightChangedState with type LightChangedState!
accepts input on CarCrashBehaviorA11 with type CarCrashBehaviorA11!
accepts input on RestoreBehaviorA11 with type RestoreBehaviorA11!

//-----------------------------------------------!
//			Variables!
//---------!
use datetime with type String!
use isMe with type boolean!
//-----------------------------------------------!
//			ReadyState!
//---------!
to start passivate in ReadyState!
when in ReadyState and receive CarCrashBehaviorA11 go to SendLightChangedState!
when in ReadyState and receive TurnOn go to SendDoneTurnOnState!
when in ReadyState and receive TurnOff go to SendDoneTurnOffState!
when in ReadyState and receive RestoreBehaviorA11 go to SendLightChangedState!
external event for ReadyState with CarCrashBehaviorA11
<%
CarCrashBehaviorA11 event = (CarCrashBehaviorA11) messageList.get(0).getData();
String[] params = event.getValue().split(";");
datetime = params[0];
isMe = contains(name, params[2].split(","));
System.out.println("----------------------- LuminareA11 IsMe "+ (isMe ? "true": false) +" ------------------------");
System.out.println("----------------------- LuminareA11 Received CarCrashBehaviorA11 ------------------------");
%>!
external event for ReadyState with TurnOn
<%
TurnOn event = (TurnOn) messageList.get(0).getData();
String[] params = event.getValue().split(";");
datetime = params[0];
System.out.println("----------------------- LuminareA11 Received TurnOn ------------------------");
%>!
external event for ReadyState with TurnOff
<%
TurnOff event = (TurnOff) messageList.get(0).getData();
String[] params = event.getValue().split(";");
datetime = params[0];
System.out.println("----------------------- LuminareA11 Received TurnOff ------------------------");
%>!
external event for ReadyState with RestoreBehaviorA11
<%
RestoreBehaviorA11 event = (RestoreBehaviorA11) messageList.get(0).getData();
String[] params = event.getValue().split(";");
datetime = params[0];
%>!

//-----------------------------------------------!
//			Send LightChangedState!
//---------!
hold in SendLightChangedState for time 1!
after SendLightChangedState output LightChangedState!
from SendLightChangedState go to ReadyState!
output event for SendLightChangedState
<%
if (isMe) {
	output.add(outLightChangedState, new LightChangedState(datetime + ";" + "light_changed_state" + ";" + name));	
} else {
	output.add(outLightChangedState, new LightChangedState(datetime + ";" + "light_changed_state"));
}

System.out.println("----------------------- LuminareA11 Sent SendCarCrashState ------------------------");
%>!

//-----------------------------------------------!
//			Send DoneTurnOn!
//---------!
hold in SendDoneTurnOnState for time 1!
after SendDoneTurnOnState output DoneTurnOn!
from SendDoneTurnOnState go to ReadyState!

//-----------------------------------------------!
//			Send DoneTurnOff!
//---------!
hold in SendDoneTurnOffState for time 1!
after SendDoneTurnOffState output DoneTurnOff!
from SendDoneTurnOffState go to ReadyState!
output event for SendDoneTurnOffState
<%
output.add(outDoneTurnOff, new DoneTurnOff(datetime + ";" + "done_turn_off" + ";" + name));
System.out.println("----------------------- LuminareA11 Sent DoneTurnOff ------------------------");
%>!

//-----------------------------------------------!
//			Additional code
//---------!

add additional code
<%
protected String name = "A11";
protected boolean contains(String key, String[] values) {
	System.out.println("----------------------- Key: |" + key + "| ------------------------");
	
	for(String v : values) {
		System.out.println("----------------------- Value: |" + v + "| ------------------------");
		if (v.trim().equals(key)) return true;
	}
	return false;
}
%>!